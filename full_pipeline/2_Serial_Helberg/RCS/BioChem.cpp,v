head	1.3;
access;
symbols;
locks
	maurerj1:1.3; strict;
comment	@// @;


1.3
date	2015.11.20.15.05.14;	author maurerj1;	state Exp;
branches;
next	1.2;

1.2
date	2015.11.13.13.54.13;	author maurerj1;	state Exp;
branches;
next	1.1;

1.1
date	2015.10.29.17.08.54;	author maurerj1;	state Exp;
branches;
next	;


desc
@The code should work, has not been tested, though.
@


1.3
log
@fixed repeat and palindrome
@
text
@#include"BioChem.h"
#include"Helberg_Functions.h" //fix
#include<algorithm>
#include<cmath>

int Biochem(vector<int> &VectorCode, int n){

	vector<vector<int> > Bad_Codes(6);	//This will hold the values that need to be removed
	vector<vector<string> > Nucleotide_Codes(6);

	//setup Bad_Codes
	for (int i = 0; i < 6; i++)
		Bad_Codes[i].push_back(i);

	for (int j = 0; j < 6; j++){
		Nucleotide_Codes[j].resize(VectorCode.size());
	}

	//Setup Nucleotide_Codes
	for (int Loop_GC_Partitions = 0; Loop_GC_Partitions < 6; Loop_GC_Partitions++){
		for (unsigned int Loop_Code = 0; Loop_Code < VectorCode.size(); Loop_Code++){
			Nucleotide_Codes[Loop_GC_Partitions][Loop_Code] = (Assign_Nucleotides(VectorCode[Loop_Code], Loop_GC_Partitions, n));
		}
	}

	//Check GC content	
	GC_Content(Bad_Codes, Nucleotide_Codes);

	//Look through for palindromes and inverted repeats
	Palindromes(Bad_Codes, Nucleotide_Codes);

	//check base stacking stability
	//Base_Stacking_Stability(Bad_Codes, Nucleotide_Codes);
	
	sort(Bad_Codes.begin(), Bad_Codes.end(), Sort_Vector_Int);	//sort the vectors by size, choose smallest

	//check for tandem repeats
	Tandem_Repeat(Bad_Codes, Nucleotide_Codes);

	//TODO: Look up indel frequencies and neighbor effects - 80 - 90%???

	//marking the bad codes
	for (unsigned int i = 1; i < Bad_Codes[0].size(); i++)
		VectorCode[(Bad_Codes[0][i])] = 0;

	//include flag in statement
	//deleting the codes
	VectorCode.erase(remove(VectorCode.begin(), VectorCode.end(), 0), VectorCode.end());

	return Bad_Codes[0][0];
}

string Assign_Nucleotides(int IntCode, int i, int n){
	string Nucleotides;
	int Digit = 0;

	for (int j = 0; j < n; j++){

		Digit = ((IntCode & (3 * Power(4, j))) >> (j * 2));

		//std::cout << "code: " << IntCode << endl << "digit: " << Digit << endl << "GC_Partition: " << i << endl << j << "th iteration" << endl << "Nucleotides is : " << Nucleotides << endl;

		switch (i){
		case 0:switch (Digit)
		{
		case 0: Nucleotides += 'G'; //cout << Nucleotides[j] << endl; 
			break;
		case 1: Nucleotides += 'C'; //cout << Nucleotides[j] << endl; 
			break;
		case 2: Nucleotides += 'A'; //cout << Nucleotides[j] << endl; 
			break;
		case 3: Nucleotides += 'T'; //cout << Nucleotides[j] << endl; 
			break;
		}; break;
		case 1:switch (Digit)
		{
		case 0: Nucleotides += 'G'; break;
		case 1: Nucleotides += 'T'; break;
		case 2: Nucleotides += 'C'; break;
		case 3: Nucleotides += 'A'; break;
		} break;

		case 2:switch (Digit)
		{
		case 0: Nucleotides += 'A'; break;
		case 1: Nucleotides += 'G'; break;
		case 2: Nucleotides += 'C'; break;
		case 3: Nucleotides += 'T'; break;
		} break;

		case 3:switch (Digit)
		{
		case 0: Nucleotides += 'G'; break;
		case 1: Nucleotides += 'A'; break;
		case 2: Nucleotides += 'T'; break;
		case 3: Nucleotides += 'C'; break;
		} break;

		case 4:switch (Digit)
		{
		case 0: Nucleotides += 'A'; break;
		case 1: Nucleotides += 'G'; break;
		case 2: Nucleotides += 'T'; break;
		case 3: Nucleotides += 'C'; break;
		} break;

		case 5:switch (Digit) 
		{
		case 0: Nucleotides += 'A'; break;
		case 1: Nucleotides += 'T'; break;
		case 2: Nucleotides += 'G'; break;
		case 3: Nucleotides += 'C'; break;
		} break;
		}
	}
	//cout << Nucleotides << endl;
	return Nucleotides;
}

string Reverse_Complement(string Nucleotides){

	string RC;

	for (int i = (Nucleotides.length() - 1); i >= 0; i--){
		if (Nucleotides[i] == 'A') RC += 'T';
		else if (Nucleotides[i] == 'T') RC += 'A';
		else if (Nucleotides[i] == 'C') RC += 'G';
		else RC += 'C';
	}

	return RC;

}

void Base_Stacking_Stability(vector<vector<int> > &Bad_Codes, vector<vector<string> > &Nucleotide_Codes)	{

	//TODO: MORE RESEARCH ON BASE STACKING, HOW IMPORTANT IS IT???

	string pair_stacking;

	unsigned int n = Nucleotide_Codes.size();
	for (int Loop_GC_Partitions = 0; Loop_GC_Partitions < 6; Loop_GC_Partitions++){ //loop through each GC partition
		for (unsigned int Loop_Code = 0; Loop_Code < n; Loop_Code++){ //loop through each code in the codebook
			double stability = 0.0;
			for (unsigned int Loop_Letter = 0; Loop_Letter < n - 2; Loop_Letter++){//loop through each letter to find the palindromes
				pair_stacking = Nucleotide_Codes[Loop_GC_Partitions][Loop_Code].substr(Loop_Letter, 1);
				stability += Stacking_Stability(pair_stacking);
				if ((stability/Nucleotide_Codes[Loop_GC_Partitions][Loop_Code].length()) < 1){ // what should this value be
					//cout << "Stacking" << Nucleotide_Codes[Loop_GC_Partitions][Loop_Code] << endl;
					Bad_Codes[Loop_GC_Partitions].push_back(Loop_Code);
				}
			}
		}
	}
}

double Stacking_Stability(string pair_stacking){
	//this returns the delta G value
	if (pair_stacking == "AA" || pair_stacking == "TT") return 1.9;
	else if (pair_stacking == "AT") return 1.5;
	else if (pair_stacking == "TA") return 0.9;
	else if (pair_stacking == "CA") return 1.9;
	else if (pair_stacking == "GT") return 1.3;
	else if (pair_stacking == "CT") return 1.6;
	else if (pair_stacking == "GA") return 1.6;
	else if (pair_stacking == "CG") return 3.6;
	else if (pair_stacking == "GC") return 3.1;
	else if (pair_stacking == "GG" || pair_stacking == "CC") return 3.1;
}

void GC_Content(vector<vector<int> > &Bad_Codes, vector<vector<string> > &Nucleotide_Codes){

	//TODO: What is this special GC content?
	//Hickman: 50%???
	//Intuition: Same as the sample???

	
	for (int Loop_GC_Partitions = 0; Loop_GC_Partitions < 6; Loop_GC_Partitions++){ //loop through each GC partition

		for (unsigned int Loop_Code = 0; Loop_Code < Nucleotide_Codes[Loop_GC_Partitions].size(); Loop_Code++){ //loop through each code in the codebook

			float GC_Content = 0.0;

			for (int Loop_Letter = 0; Loop_Letter < Nucleotide_Codes[0][0].length(); Loop_Letter++){
				if (Nucleotide_Codes[Loop_GC_Partitions][Loop_Code][Loop_Letter] == 'C' || Nucleotide_Codes[Loop_GC_Partitions][Loop_Code][Loop_Letter] == 'G') GC_Content++;
			}
			if (GC_Content / Nucleotide_Codes[0][0].length() < 0.25 || GC_Content / Nucleotide_Codes[0][0].length() > 0.75){ //check for GC content; parameters: between 25% and 75%
				//cout << "GC" << Nucleotide_Codes[Loop_GC_Partitions][Loop_Code] << endl;
				Bad_Codes[Loop_GC_Partitions].push_back(Loop_Code);
			}
		}
	}
}

void Tandem_Repeat(vector<vector<int> > &Bad_Codes, vector<vector<string> > &Nucleotide_Codes){

	//check for homopolymers; single < 3 for roche sequencing and <8 for PCR, double < 6
	//Quadruplet < 16 for 10% changed after PCR research to be done on the longer ones

	//TODO: Repeats that are bad, what are the parameters???

	bool bad = false;

	int size = Nucleotide_Codes[0].size();
	int length = Nucleotide_Codes[0][0].length();

	for (int Loop_Code = 0; Loop_Code < size; Loop_Code++){ //loop through each code in the codebook
		int Tandem_Repeat = 0, Repeat_Length;
		for (Repeat_Length = 1; Repeat_Length <= 4; Repeat_Length++){	//This will loop through each possible STR length

			for (int Loop_Letter = 0; Loop_Letter <= (length - Repeat_Length); Loop_Letter += Repeat_Length){	//Go through the codeword to find STRs with the selected repeat length
				
				cout << endl << "whole " << Nucleotide_Codes[0][Loop_Code] << endl;
				cout << "letter " << Loop_Letter << endl;
				cout << "stop condition" << (n - Repeat_Length) << endl;
				cout << "Repeat_Length " << Repeat_Length << endl;
				cout << "n " << n << endl;
				cout << "first " << Nucleotide_Codes[0][Loop_Code].substr(Loop_Letter, Repeat_Length) << endl;
				cout << "second " <<Nucleotide_Codes[0][Loop_Code].substr(Loop_Letter + Repeat_Length, Repeat_Length) << endl;

				string one = Nucleotide_Codes[0][Loop_Code].substr(Loop_Letter, Repeat_Length);
				string two =  Nucleotide_Codes[0][Loop_Code].substr(Loop_Letter + Repeat_Length, Repeat_Length);

				cout << "tandem ok" << endl;

				if (Loop_Letter == 0){
					Tandem_Repeat = 1;
				}
				else if (one == two) {
					Tandem_Repeat++;
				}
				else {
					Tandem_Repeat = 1;
				}

				//TODO: more research on how the number of repeats affects mutations

				//Taq polymerase has 7-9 nucleotides in its active site at one time,
				//so is having all nucleotides inside it the determining factor?
					//1*8 = 8, 2*5 = 10

				//For roche 454 sequencing,if length = 1, break should be at 3

				if (Tandem_Repeat > 8 && Repeat_Length == 1) {
					bad = true; Bad_Codes[0].push_back(Loop_Code); break;
				}
				else if (Tandem_Repeat > 5 && Repeat_Length == 2) {
					bad = true; Bad_Codes[0].push_back(Loop_Code); break;
				}
				else if (Tandem_Repeat > 4 && Repeat_Length == 3) {
					bad = true; Bad_Codes[0].push_back(Loop_Code); break;
				}
				else if (Tandem_Repeat > 3 && Repeat_Length == 4) {
					bad = true; Bad_Codes[0].push_back(Loop_Code); break;
				}
			}
			if (bad) {
				break;
			}
		}

		if (bad) {
			bad = false;
		}
	}
}

void Palindromes(vector<vector<int> > &Bad_Codes, vector<vector<string> > &Nucleotide_Codes){

	//This piece of code needs to be dialed down.
	//TODO: what are these parameters?

	int size = Nucleotide_Codes[0].size();
	float length = Nucleotide_Codes[0][0].length();
	bool good = true;

	for (int Loop_GC_Partitions = 0; Loop_GC_Partitions < 6; Loop_GC_Partitions++){ //loop through each GC partition
		int Loop_Code = 0;
		while (Loop_Code < size){ //loop through each code in the codebook
			good = true;
			//TODO: What are the parameters of the next two loops
			int Loop_Size = 4; 
			while ((Loop_Size <= floor(length / 2)) && good){ //loop through the size of the palindrome
				int Loop_Distance = 1;
				while ((Loop_Distance <= (length - (2 * Loop_Size))) && good){//loop through the distance between the palindromes
					int Loop_Letter = 0; 
					while ((Loop_Letter <= (length - (Loop_Distance +(Loop_Size * 2)))) && good){//loop through each letter to find the palindromes

						string RC = Reverse_Complement(Nucleotide_Codes[Loop_GC_Partitions][Loop_Code].substr(Loop_Letter, Loop_Size));
						string Next = Nucleotide_Codes[Loop_GC_Partitions][Loop_Code].substr(Loop_Letter + Loop_Size + Loop_Distance, Loop_Size);
						if (RC == Next){
							//cout << "Palindromes" << Nucleotide_Codes[Loop_GC_Partitions][Loop_Code] << endl;
							Bad_Codes[Loop_GC_Partitions].push_back(Loop_Code);
							good = false;
						}
						Loop_Letter++;
					}
					Loop_Distance++;
				}
				Loop_Size++;
			}
			Loop_Code++;
		}
	}
}

@


1.2
log
@functional
@
text
@d4 1
d124 4
a127 4
	for (unsigned int i = (Nucleotides.length() - 1); i >= 0; i--){
		if (Nucleotides[i] = 'A') RC += 'T';
		else if (Nucleotides[i] = 'T') RC += 'A';
		else if (Nucleotides[i] = 'C') RC += 'G';
d204 2
a205 1
	int n = Nucleotide_Codes[0].size();
d207 1
a207 1
	for (int Loop_Code = 0; Loop_Code < n; Loop_Code++){ //loop through each code in the codebook
d211 15
a225 1
			for (int Loop_Letter = 0; Loop_Letter + Repeat_Length <= n; Loop_Letter += Repeat_Length){	//Go through the codeword to find STRs with the selected repeat length
d229 1
a229 2
				else if (Nucleotide_Codes[0][Loop_Code].substr(Loop_Letter - Repeat_Length, Repeat_Length) ==
					Nucleotide_Codes[0][Loop_Code].substr(Loop_Letter, Repeat_Length)) {
d238 7
a244 1
				if (Tandem_Repeat > 3 && Repeat_Length == 1) {
d247 1
a247 1
				else if (Tandem_Repeat > 6 && Repeat_Length == 2) {
d250 1
a250 1
				else if (Tandem_Repeat > 8 && Repeat_Length == 3) {
d253 1
a253 1
				else if (Tandem_Repeat > 10 && Repeat_Length == 4) {
d273 3
a275 1
	int n = Nucleotide_Codes[0].size();
d278 3
a280 3

		for (int Loop_Code = 0; Loop_Code < n; Loop_Code++){ //loop through each code in the codebook

d282 10
a291 9

			for (int Loop_Size = 4; Loop_Size <= n / 2; Loop_Size++){ //loop through the size of the palindrome

				for (int Loop_Distance = 1; Loop_Distance < n - Loop_Size; Loop_Distance++){//loop through the distance between the palindromes

					for (int Loop_Letter = 0; Loop_Letter < n - Loop_Distance - 1; Loop_Letter++){//loop through each letter to find the palindromes

						if (Nucleotide_Codes[Loop_GC_Partitions][Loop_Code].substr(Loop_Letter, Loop_Letter + Loop_Size) ==
							Reverse_Complement(Nucleotide_Codes[Loop_GC_Partitions][Loop_Code].substr(Loop_Letter + Loop_Distance, Loop_Letter + Loop_Size))){
d294 1
d296 1
d298 1
d300 1
d302 1
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
#include"Helberg_Functions.h"
d7 2
a8 2
	vector<vector <int>> Bad_Codes(6);	//This will hold the values that need to be removed
	vector<vector<string>> Nucleotide_Codes(VectorCode.size());
d14 4
d21 1
a21 1
			Nucleotide_Codes[Loop_GC_Partitions][Loop_Code] = Assign_Nucleotides(VectorCode[Loop_Code], Loop_GC_Partitions, n);
d25 3
a30 3
	//Check GC content	
	GC_Content(Bad_Codes, Nucleotide_Codes);

d32 2
a33 2
	Base_Stacking_Stability(Bad_Codes, Nucleotide_Codes);

d54 1
d57 5
d63 1
a63 1
		case 0:switch ((IntCode & (4 * Power(3, j))) >> ((j - 1) * 2))
d65 8
a72 4
		case 0: Nucleotides[j] = 'G'; break;
		case 1: Nucleotides[j] = 'C'; break;
		case 2: Nucleotides[j] = 'A'; break;
		case 3: Nucleotides[j] = 'T'; break;
d74 1
a74 1
		case 1:switch ((IntCode & (4 * Power(3, j))) >> ((j - 1) * 2))
d76 4
a79 4
		case 0: Nucleotides[j] = 'G'; break;
		case 1: Nucleotides[j] = 'A'; break;
		case 2: Nucleotides[j] = 'C'; break;
		case 3: Nucleotides[j] = 'T'; break;
d82 1
a82 1
		case 2:switch ((IntCode & (4 * Power(3, j))) >> ((j - 1) * 2))
d84 4
a87 4
		case 0: Nucleotides[j] = 'C'; break;
		case 1: Nucleotides[j] = 'T'; break;
		case 2: Nucleotides[j] = 'A'; break;
		case 3: Nucleotides[j] = 'G'; break;
d90 1
a90 1
		case 3:switch ((IntCode & (4 * Power(3, j))) >> ((j - 1) * 2))
d92 4
a95 4
		case 0: Nucleotides[j] = 'A'; break;
		case 1: Nucleotides[j] = 'G'; break;
		case 2: Nucleotides[j] = 'T'; break;
		case 3: Nucleotides[j] = 'C'; break;
d98 1
a98 1
		case 4:switch ((IntCode & (4 * Power(3, j))) >> ((j - 1) * 2))
d100 4
a103 4
		case 0: Nucleotides[j] = 'A'; break;
		case 1: Nucleotides[j] = 'G'; break;
		case 2: Nucleotides[j] = 'C'; break;
		case 3: Nucleotides[j] = 'T'; break;
d106 1
a106 1
		case 5:switch ((IntCode & (3 * Power(4, j))) >> ((j - 1) * 2)) //TODO: cp
d108 4
a111 4
		case 0: Nucleotides[j] = 'A'; break;
		case 1: Nucleotides[j] = 'T'; break;
		case 2: Nucleotides[j] = 'C'; break;
		case 3: Nucleotides[j] = 'G'; break;
d115 1
a115 1

d123 5
a127 5
	for (unsigned int i = 0; i < Nucleotides.length(); i++){
		if (Nucleotides[i] = 'A') RC[Nucleotides.length() - i] = 'T';
		else if (Nucleotides[i] = 'T') RC[Nucleotides.length() - i] = 'A';
		else if (Nucleotides[i] = 'C') RC[Nucleotides.length() - i] = 'G';
		else RC[Nucleotides.length() - i] = 'C';
d134 1
a134 1
void Base_Stacking_Stability(vector<vector<int>> &Bad_Codes, vector<vector<string>> &Nucleotide_Codes)	{
d139 1
d144 2
a145 2
			for (unsigned int Loop_Letter = 0; Loop_Letter < n - 1; Loop_Letter++){//loop through each letter to find the palindromes
				pair_stacking = Nucleotide_Codes[Loop_GC_Partitions][Loop_Code][Loop_Letter] + Nucleotide_Codes[Loop_GC_Partitions][Loop_Code][Loop_Letter + 1];
d148 1
d170 1
a170 1
void GC_Content(vector<vector<int>> &Bad_Codes, vector<vector<string>> &Nucleotide_Codes){
d176 1
a176 1
	int n = Nucleotide_Codes[0].size(), m = Nucleotide_Codes[0][0].length();
d183 1
a183 1
			for (int Loop_Letter = 0; Loop_Letter < m; Loop_Letter++){
d186 3
a188 3
			if (GC_Content / Nucleotide_Codes[Loop_GC_Partitions].size() < 0.25 || GC_Content / Nucleotide_Codes[Loop_GC_Partitions].size() > 0.75){ //check for GC content; parameters: between 25% and 75%
				for (int k = 0; k < 4; k++)
					Bad_Codes[Loop_GC_Partitions].push_back(Loop_Code);
d194 1
a194 1
void Tandem_Repeat(vector<vector<int>> &Bad_Codes, vector<vector<string>> &Nucleotide_Codes){
d247 1
a247 1
void Palindromes(vector<vector<int>> &Bad_Codes, vector<vector<string>> &Nucleotide_Codes){
d268 1
d276 2
a277 1
}@
